//
// Created by vitanmc on 2023/3/6.
//

#include <functional>
#include <string.h>

#include "TcpServer.h"
#include "Logger.h"
#include "TcpConnection.h"

namespace Vita {

    static EventLoop *CheckLoopNotNull(EventLoop *loop) {
        if (loop == nullptr) {
            LOG_FATAL("%s:%s:%d mainLoop is null!\n", __FILE__, __FUNCTION__, __LINE__);
        }
        return loop;
    }




    //TcpServer的构造函数
    // 1. loop是哪个baseLoop
    // 2. Acceptor是新建的Acceptor
    //      2.1 传入baseLoop
    //      2.2 传入listenAddr
    // 3. ThreadPool是新建的EventLoopThreadPool
    //      3.1 传入baseLoop
    // 4. acceptor设置newConnectionCallback

    TcpServer::TcpServer(EventLoop *loop,
                         const InetAddress &listenAddr,
                         const std::string &nameArg,
                         Option option)
            : loop_(CheckLoopNotNull(loop)), ipPort_(listenAddr.toIpPort()), name_(nameArg),
              acceptor_(new Acceptor(loop, listenAddr, option == kReusePort)),
              threadPool_(new EventLoopThreadPool(loop, name_)), connectionCallback_(), messageCallback_(),
              nextConnId_(1), started_(0) {
        // 当有新用户连接时，Acceptor类中绑定的acceptChannel_会有读事件发生
        // 执行handleRead()
        // handleRead()函数体内会调用TcpServer::newConnection回调
        acceptor_->setNewConnectionCallback(
                std::bind(&TcpServer::newConnection, this, std::placeholders::_1, std::placeholders::_2));
    }

    TcpServer::~TcpServer() {
        for (auto &item: connections_) {
            TcpConnectionPtr conn(item.second);
            item.second.reset();    // 把原始的智能指针复位 让栈空间的TcpConnectionPtr conn指向该对象 当conn出了其作用域 即可释放智能指针指向的对象
            // 销毁连接
            conn->getLoop()->runInLoop(
                    std::bind(&TcpConnection::connectDestroyed, conn));
        }
    }

// 设置底层subloop的个数
    void TcpServer::setThreadNum(int numThreads) {
        threadPool_->setThreadNum(numThreads);
    }

// 开启服务器监听
    void TcpServer::start() {
        if (started_++ == 0)    // 防止一个TcpServer对象被start多次
        {
            threadPool_->start(threadInitCallback_);    // 启动底层的loop线程池
            loop_->runInLoop(std::bind(&Acceptor::listen, acceptor_.get()));
        }
    }

// 有一个新用户连接，acceptor会执行这个回调操作
// acceptor会创建 新的fd，包装成channel，enableReading
// 有新连接的时候，acceptorfd触发，调用handleRead()接收一个连接
// acceptor函数返回一个新的fd，传出新的地址结构(对端的peerAddr)
// 然后acceptor调用newConnection => TcpConnection => 轮询
// 负责将mainLoop接收到的请求连接(acceptChannel_会有读事件发生)通过回调轮询分发给subLoop去处理


// peerAddr为Acceptor调用accept传出的
// localAddr为本机绑定的
    void TcpServer::newConnection(int sockfd, const InetAddress &peerAddr) {
        // 轮询算法 选择一个subLoop 来管理 connfd 对应的 channel
        EventLoop *ioLoop = threadPool_->getNextLoop();
        char buf[64] = {0};
        snprintf(buf, sizeof buf, "-%s#%d", ipPort_.c_str(), nextConnId_);
        ++nextConnId_;  // 这里没有设置为原子类是因为其只在mainloop中执行 不涉及线程安全问题
        std::string connName = name_ + buf;

        LOG_INFO("TcpServer::newConnection [%s] - new connection [%s] from %s\n",
                 name_.c_str(), connName.c_str(), peerAddr.toIpPort().c_str());

        // 通过sockfd获取其绑定的本机的ip地址和端口信息
        sockaddr_in local;
        ::memset(&local, 0, sizeof(local));
        socklen_t addrlen = sizeof(local);
        if (::getsockname(sockfd, (sockaddr *) &local, &addrlen) < 0) {
            LOG_ERROR("sockets::getLocalAddr");
        }

        InetAddress localAddr(local);


        // 新建一个TcpConnection（本函数还是咋acceptor里面完成）
        // TcpConnection参数
        // 1. ioLoop从EventLoopTHreadPool里轮询取出的
        // 2. sockfd从Acceptor直接bind的
        // 3. localAddr
        // 4. peerAddr
        TcpConnectionPtr conn(new TcpConnection(ioLoop,
                                                connName,
                                                sockfd,
                                                localAddr,
                                                peerAddr));
        connections_[connName] = conn;
        // 下面的回调都是用户设置给TcpServer => TcpConnection的
        // 至于Channel绑定的则是TcpConnection设置的四个，handleRead,handleWrite...
        // 这下面的回调用于handlexxx函数中
        conn->setConnectionCallback(connectionCallback_);
        conn->setMessageCallback(messageCallback_);
        conn->setWriteCompleteCallback(writeCompleteCallback_);

        // 设置了如何关闭连接的回调
        conn->setCloseCallback(
                std::bind(&TcpServer::removeConnection, this, std::placeholders::_1));

        ioLoop->runInLoop(
                std::bind(&TcpConnection::connectEstablished, conn));
    }

    void TcpServer::removeConnection(const TcpConnectionPtr &conn) {
        loop_->runInLoop(
                std::bind(&TcpServer::removeConnectionInLoop, this, conn));
    }

    void TcpServer::removeConnectionInLoop(const TcpConnectionPtr &conn) {
        LOG_INFO("TcpServer::removeConnectionInLoop [%s] - connection %s\n",
                 name_.c_str(), conn->name().c_str());

        connections_.erase(conn->name());
        EventLoop *ioLoop = conn->getLoop();
        ioLoop->queueInLoop(
                std::bind(&TcpConnection::connectDestroyed, conn));
    }


} // Vita